plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply the JavaFX plugin
    id 'org.openjfx.javafxplugin' version '0.1.0' // Atau versi terbaru yang kompatibel
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0' // Ganti dengan versi libs jika ada
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0'
    // This dependency is used by the application (Contoh Guava, bisa dihapus jika tidak perlu)
    // implementation libs.guava // Jika Anda mendefinisikan 'guava' di gradle/libs.versions.toml

    // JavaFX dependencies - dihapus karena akan di-handle oleh plugin javafx
    // implementation "org.openjfx:javafx-controls:${javafx.version}"
    // implementation "org.openjfx:javafx-fxml:${javafx.version}"
    // implementation "org.openjfx:javafx-graphics:${javafx.version}"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

javafx {
    version = "21" // Sesuaikan dengan versi JavaFX yang Anda inginkan (misal: 17.0.10, 21, 22)
    modules = [ 'javafx.controls', 'javafx.fxml' ] // Tambahkan modul lain yang dibutuhkan (misal: javafx.graphics, javafx.media)
}

application {
    // Define the main class for the application.
    // Pastikan ini adalah kelas yang meng-extend javafx.application.Application dan memiliki metode main
    mainClass = 'moomoo.apps.App' // Ganti dengan nama package dan kelas utama aplikasi JavaFX Anda
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}